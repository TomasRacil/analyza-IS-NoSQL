# Worker procesy Nginx; 'auto' je obvykle dobrá volba.
worker_processes auto;

# Kontext pro události.
events {
    worker_connections 1024; # Maximální počet spojení na jeden worker proces.
}

# HTTP kontext.
http {
    # Definice upstream skupiny serverů pro service_b.
    # Nginx bude rozkládat zátěž mezi instance služby 'service_b'.
    # Docker Compose DNS resolver přeloží 'service_b' na IP adresy
    # všech běžících kontejnerů této služby.
    upstream service_b_backend {
        # Použijeme DNS discovery, které Docker Compose poskytuje.
        # Nginx bude periodicky resolvovat 'service_b' a získá seznam IP adres
        # všech kontejnerů služby 'service_b'.
        # 'resolve' direktiva je dostupná v Nginx Plus nebo s modulem ngx_http_upstream_hc_module.
        # Pro open-source Nginx a Docker Compose je běžnější spoléhat na to,
        # že Docker Compose při startu/změně poskytne správné IP adresy přes DNS.
        # V tomto jednoduchém příkladu bude Nginx při startu resolvovat service_b:5000.
        # Pro dynamické přidávání/odebírání instancí by bylo potřeba pokročilejší řešení
        # nebo restart/reload Nginx. Docker Swarm nebo Kubernetes toto řeší lépe.
        
        # Jednoduchá konfigurace pro Docker Compose, kde service_b naslouchá na portu 5000
        server service_b:5000; 
        # Pokud bychom chtěli explicitně definovat více serverů (méně dynamické):
        # server service_b_1:5000;
        # server service_b_2:5000;
        # ... atd. Docker Compose by měl vytvořit aliasy pro škálované služby.
        # Nicméně, spoléhání na DNS resolution pro `service_b` je čistší.
    }

    # Definice serveru, který bude naslouchat na portu 80 (uvnitř kontejneru).
    server {
        listen 80;
        server_name localhost; # Není kritické v tomto kontextu

        # Logovací formáty a cesty (volitelné, pro ladění)
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Pravidlo pro přesměrování všech požadavků na upstream skupinu service_b_backend.
        location / {
            proxy_pass http://service_b_backend; # Předá požadavek na jednu z instancí service_b
            
            # Hlavičky, které se mají předat backend serveru
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Nastavení pro WebSockets, pokud by byly potřeba (pro tento příklad nejsou)
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }
    }
}
